cmake_minimum_required(VERSION 3.22)

#
# This file is generated only once,
# and is not re-generated if converter is called multiple times.
#
# User is free to modify the file as much as necessary
#

# Setup compiler settings
set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_C_EXTENSIONS ON)


# Define the build type
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Debug")
endif()

# Set the project name
set(CMAKE_PROJECT_NAME high-voltage-controller)

# Include toolchain file
include("cmake/gcc-arm-none-eabi.cmake")

# Enable compile command to ease indexing with e.g. clangd
set(CMAKE_EXPORT_COMPILE_COMMANDS TRUE)

# Enable CMake support for ASM and C languages
enable_language(C ASM)

# Core project settings
project(${CMAKE_PROJECT_NAME})
message("Build type: " ${CMAKE_BUILD_TYPE})

# Create an executable object type
add_executable(${CMAKE_PROJECT_NAME})

# Add STM32CubeMX generated sources
add_subdirectory(cmake/stm32cubemx)


# Define source directories
set(USER_SRC_DIR ${CMAKE_SOURCE_DIR}/Core/User)
set(TEST_SRC_DIR ${CMAKE_SOURCE_DIR}/Core/Test)

# Add sources to executable
target_sources(${CMAKE_PROJECT_NAME} PRIVATE
    ${TEST_SRC_DIR}/tests.c
    ${USER_SRC_DIR}/app_main.c
    ${USER_SRC_DIR}/hv_control.c
    ${USER_SRC_DIR}/heartbeat.c
    ${USER_SRC_DIR}/adc_driver.c
    ${USER_SRC_DIR}/debug_uart.c
    ${USER_SRC_DIR}/can_driver.c
)

# Add include paths
target_include_directories(${CMAKE_PROJECT_NAME} PRIVATE
    ${USER_SRC_DIR}
    ${TEST_SRC_DIR}
)

# Add project symbols (macros)
target_compile_definitions(${CMAKE_PROJECT_NAME} PRIVATE
    # Add user defined symbols
)

# Link directories setup
target_link_directories(${CMAKE_PROJECT_NAME} PRIVATE
    # Add user defined library search paths
)

# Add linked libraries
target_link_libraries(${CMAKE_PROJECT_NAME}
    stm32cubemx

    # Add user defined libraries
)


# Tool for flashing
set(STM32_PROGRAMMER_CLI "STM32_Programmer_CLI" CACHE FILEPATH "Path to STM32_Programmer_CLI")

if(NOT STM32_PROGRAMMER_CLI)
    message(FATAL_ERROR "STM32_PROGRAMMER_CLI not set. Please define the path using -DSTM32_PROGRAMMER_CLI=...")
endif()

add_custom_target(flash
    COMMAND ${STM32_PROGRAMMER_CLI} -c port=SWD -d $<TARGET_FILE:${PROJECT_NAME}> -rst
    DEPENDS ${PROJECT_NAME}
    COMMENT "Flashing firmware to target via ST-Link..."
)
